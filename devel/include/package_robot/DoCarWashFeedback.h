// Generated by gencpp from file package_robot/DoCarWashFeedback.msg
// DO NOT EDIT!


#ifndef PACKAGE_ROBOT_MESSAGE_DOCARWASHFEEDBACK_H
#define PACKAGE_ROBOT_MESSAGE_DOCARWASHFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace package_robot
{
template <class ContainerAllocator>
struct DoCarWashFeedback_
{
  typedef DoCarWashFeedback_<ContainerAllocator> Type;

  DoCarWashFeedback_()
    : percent_cars_complete(0.0)  {
    }
  DoCarWashFeedback_(const ContainerAllocator& _alloc)
    : percent_cars_complete(0.0)  {
  (void)_alloc;
    }



   typedef float _percent_cars_complete_type;
  _percent_cars_complete_type percent_cars_complete;





  typedef boost::shared_ptr< ::package_robot::DoCarWashFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::package_robot::DoCarWashFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct DoCarWashFeedback_

typedef ::package_robot::DoCarWashFeedback_<std::allocator<void> > DoCarWashFeedback;

typedef boost::shared_ptr< ::package_robot::DoCarWashFeedback > DoCarWashFeedbackPtr;
typedef boost::shared_ptr< ::package_robot::DoCarWashFeedback const> DoCarWashFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::package_robot::DoCarWashFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::package_robot::DoCarWashFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::package_robot::DoCarWashFeedback_<ContainerAllocator1> & lhs, const ::package_robot::DoCarWashFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.percent_cars_complete == rhs.percent_cars_complete;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::package_robot::DoCarWashFeedback_<ContainerAllocator1> & lhs, const ::package_robot::DoCarWashFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace package_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::package_robot::DoCarWashFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::package_robot::DoCarWashFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package_robot::DoCarWashFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package_robot::DoCarWashFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package_robot::DoCarWashFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package_robot::DoCarWashFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::package_robot::DoCarWashFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf227faed0a440a437bef3d687cc66a3";
  }

  static const char* value(const ::package_robot::DoCarWashFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf227faed0a440a4ULL;
  static const uint64_t static_value2 = 0x37bef3d687cc66a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::package_robot::DoCarWashFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "package_robot/DoCarWashFeedback";
  }

  static const char* value(const ::package_robot::DoCarWashFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::package_robot::DoCarWashFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float32 percent_cars_complete\n"
;
  }

  static const char* value(const ::package_robot::DoCarWashFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::package_robot::DoCarWashFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.percent_cars_complete);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DoCarWashFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::package_robot::DoCarWashFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::package_robot::DoCarWashFeedback_<ContainerAllocator>& v)
  {
    s << indent << "percent_cars_complete: ";
    Printer<float>::stream(s, indent + "  ", v.percent_cars_complete);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACKAGE_ROBOT_MESSAGE_DOCARWASHFEEDBACK_H
